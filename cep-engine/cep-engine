#!/bin/bash
#
### BEGIN INIT INFO
# Provides: $cep-engine
### END INIT INFO

# Source function library.
#. /etc/init.d/functions

RETVAL=0

NAME=cep-engine
USER=root
PID_FILE="/var/run/cep-engine.pid"

CEP_ENGINE_JAR="target/cep-engine-0.1.0.jar"
CEP_ENGINE_HOME="/opt/cep-engine-service"
JVM_OPTIONS=`cat $CEP_ENGINE_HOME/jvm_options`
CEP_ENGINE_LOG="/var/log/cep-engine/cep-engine.log"

ensure_log_dir () {
    LOG_DIR=`dirname ${CEP_ENGINE_LOG}`
    if [ ! -d ${LOG_DIR} ] ; then
        mkdir -p ${LOG_DIR}
    fi
}

ensure_pid_dir () {
    PID_DIR=`dirname ${PID_FILE}`
    if [ ! -d ${PID_DIR} ] ; then
        mkdir -p ${PID_DIR}
        chown -R ${USER}:${USER} ${PID_DIR}
        chmod 755 ${PID_DIR}
    fi
}

# Checks if the given pid represents a live process.
# Returns 0 if the pid is a live process, 1 otherwise
process_alive() {
  local pid="$1" 
  ps -fp $pid | grep $pid | grep $NAME > /dev/null 2>&1
}

check_pidfile() {
    local pidfile="$1" # IN
    local pid

    pid=`cat "$pidfile" 2>/dev/null`
    if [ "$pid" = '' ]; then
    # The file probably does not exist or is empty. 
	return 1
    fi
    
    set -- $pid
    pid="$1"

    process_alive $pid
}

start() {
	ensure_log_dir
	ensure_pid_dir
	
    echo -n "Starting $NAME ... "
    if [ -f $PID_FILE ]; then
      if kill -0 `cat $PID_FILE` > /dev/null 2>&1; then
         echo "already running as process" `cat $PID_FILE` 
         exit 0
      fi
    fi
    cd $CEP_ENGINE_HOME
    nohup java $JVM_OPTIONS -jar $CEP_ENGINE_JAR >> "$CEP_ENGINE_LOG" 2>&1 < /dev/null &	
	RETVAL=$?
	
    if [ $RETVAL -eq 0 ]
    then
      if /bin/echo -n $! > "$PID_FILE"
      then
        sleep 1
        echo "started"
      else
        echo "failed to write pid"
        exit 1
      fi
    else
      echo "service did not started"
      exit 1
    fi
	
    return $RETVAL
}

stop() {
    if check_pidfile $PID_FILE; then
        echo -n "Stopping ${NAME}..."
    else
        echo "${NAME} is not running."
        return 0
    fi
	
    kill -9 $(cat "$PID_FILE")
    rm "$PID_FILE"
	
	if check_pidfile $PID_FILE ;  then
	    echo "not stopped"
	else
        echo "stopped"
	fi
	
    return $?
}

status() {
	echo -n "$NAME is "
	if check_pidfile $PID_FILE ;  then
	    echo "running as process" `cat $PID_FILE` 
	else
	    echo "not running"
	    exit 1
	fi
	return $?
}

restart() {
        stop
        start
}

case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  status)
  		status
        ;;
  restart)
        restart
        ;;
  *)
        echo $"Usage: $0 {start|stop|status|restart}"
        exit 2
esac

exit $?